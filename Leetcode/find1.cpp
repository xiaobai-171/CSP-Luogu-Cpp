/*
给定一个整数 n，计算所有小于等于 n 的非负整数中数字 1 出现的个数。

 

示例 1：

输入：n = 13
输出：6
示例 2：

输入：n = 0
输出：0
 

提示：

0 <= n <= 109

*/

#include <iostream>
#include <cmath>
using namespace std;

int countDigitOne(int n) {
    int ans = 0;
    long long k = 1;
    while(k <= n){
        ans += fmin(fmax(0LL, n % (k * 10) - k + 1), k);
        ans += n / (k*10) * k; 
        k *= 10;
    }
    
    return ans;
}

int main(){
    cout << countDigitOne(2000000000);
    system("pause");
}

/*
《编程之美》上这样说:
    
    设N = abcde ,其中abcde分别为十进制中各位上的数字。
    如果要计算百位上1出现的次数，它要受到3方面的影响：百位上的数字，百位以下（低位）的数字，百位以上（高位）的数字。
    如果百位上数字为0，百位上可能出现1的次数由更高位决定。
    比如：12013，则可以知道百位出现1的情况可能是：100~199，1100~1199,2100~2199，，...，11100~11199，一共1200个。
    可以看出是由更高位数字（12）决定，并且等于更高位数字（12）乘以 当前位数（100）。注意：高位数字不包括当前位

    如果百位上数字为1，百位上可能出现1的次数不仅受更高位影响还受低位影响。
    比如：12113，则可以知道百位受高位影响出现的情况是：
    100~199，1100~1199,2100~2199，，....，11100~11199，一共1200个。
    和上面情况一样，并且等于更高位数字（12）乘以 当前位数（100）。
    但同时它还受低位影响，百位出现1的情况是：12100~12113,一共14个，等于低位数字（13）+1。 
    注意：低位数字不包括当前数字

    如果百位上数字大于1（2~9），则百位上出现1的情况仅由更高位决定，
    比如12213，则百位出现1的情况是：100~199,1100~1199，2100~2199，...，11100~11199,12100~12199,一共有1300个，
    并且等于更高位数字+1（12+1）乘以当前位数（100）
*/
/*
思路二:
    12101百位举例，它的高位（千分位、万分位）/ (100 * 10) * 100 是百位有的一部分。因为，12000每1000中有100个数百分位
    为1，等于12*100 ，低分位（包括百分位）101，101 - 100 + 1 = 2，有两个数。如果是 《 100 的数 0个，大于等于200的100
    个。
    每一位都这样循环就可以统计出位数上所有的1了。2，3，4也是这样的思路。

*/