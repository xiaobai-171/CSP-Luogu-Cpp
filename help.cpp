#include <bits/stdc++.h>
using namespace std;

#define len 10
#define num_begin 1
vector<int> f()
{
    return {1, 2,'2'};
}

int main()
{
    int a[len] = {10,3,2,5,4,41,13,134,12,412};
    sort(a,a + len);
    for(int i = 1;i <= len;i++){
        cout << a[i] << endl; 
    }
    cout << "中位数是： ";
    cout << (double(a[(num_begin+len)/2]) + a[(num_begin+len + 1)/2]) / 2 << endl;
    /*------------------------------------------------------*/
    // cout << int(false) * int('1' - '0') << endl;
    /*
    false是0啊！！！什么鬼。。不是-1
    */
    
    /*------------------------------------------------------*/

    // if(isdigit('a')) {
    //     cout << "isDigit !" << endl;
    // }
    // cout << 1'000 << endl;
    /*判断给的字符是不是数字，原型是int isdigit ( int c );*/

    /*-----------------------------------------------------*/

    // string s = "123123";
    // string::iterator it = s.begin()+ 2;
    // s.push_back('4');
    // cout << s << endl;
    // cout << int(*it) - 48 << endl;
    // vector<string>* vec = new vector<string>(4);
    // cout << *vec << endl;
    /*
    结果为 s[2];
    */

    /*-----------------------------------------------------*/

    // bool a[10][10] = { false };
    // for(int i=0;i<10;i++){
    //     for(int j=0;j<10;j++){
    //         cout << a[i][j] << " ";
    //     }
    //     cout << endl;
    // }
    /*能够将数组全部初始化为0*/

    /*-----------------------------------------------------*/

    /*  
    string str = to_string(-21474836);    
    /* - 2 1 4 7 4 8 3 6 -3 
    // reverse(str.begin(),str.end());
    for(char ch:str) {
        cout << ch << " ";
    }

    cout << -13 % 10 << endl;
    cout << atoi(str.c_str()) << endl;
    */
    
    /*string 函数中带有to_string、atoi 函数，to_string会将符号加进来。
    atoi不能转换太大的int，转换是采取199->-200这样子的。  */

    /*-------------------------------------------------------*/

    // vector<int> test = f();/*等价于test = {1,2,'2'};*/
    // cout << test[2] << endl;
    // vector<int> test = {1,2,'2'};
    // cout << test[1];
    /*vector的列表初始化*/

    /*--------------------------------------------------------*/
    
    // vector<int> a(3);
    // cout << a.size() << endl;
    // generate(a.begin(),a.end(),rand);
    // for(auto val:a){
    //     cout << val << " ";
    // }
    // cout << endl;
    /*vector的个数初始化，随机分配数值并快速打印*/

    /*--------------------------------------------------------*/

    // unordered_map<char,int> map;
    // map['a'] = 0;
    // map['b'] = 1;
    // cout << map['c'] << endl;
    /*map<char,int> 不存在键时，值默认为0*/

    /*--------------------------------------------------------*/

    // unordered_map<int,int> map;
    // map[1] =1;
    // map[2] = 2;
    // cout << map.find(1)->second << endl;
    /*map find返回迭代器（指针）*/

    /*---------------------------------------------------------*/

    // int i = 100;
    // long long j = 10000000000;
    // cout << i / j << endl;
    /*结果为0*/

    /*----------------------------------------------------------*/
    system("pause");    

    return 0;                                                                                                                                                                                                                    
}
/*
《编程之美》上这样说:
    
    设N = abcde ,其中abcde分别为十进制中各位上的数字。
    如果要计算百位上1出现的次数，它要受到3方面的影响：百位上的数字，百位以下（低位）的数字，百位以上（高位）的数字。
    如果百位上数字为0，百位上可能出现1的次数由更高位决定。
    比如：12013，则可以知道百位出现1的情况可能是：100~199，1100~1199,2100~2199，，...，11100~11199，一共1200个。
    可以看出是由更高位数字（12）决定，并且等于更高位数字（12）乘以 当前位数（100）。注意：高位数字不包括当前位

    如果百位上数字为1，百位上可能出现1的次数不仅受更高位影响还受低位影响。
    比如：12113，则可以知道百位受高位影响出现的情况是：
    100~199，1100~1199,2100~2199，，....，11100~11199，一共1200个。
    和上面情况一样，并且等于更高位数字（12）乘以 当前位数（100）。
    但同时它还受低位影响，百位出现1的情况是：12100~12113,一共14个，等于低位数字（13）+1。 
    注意：低位数字不包括当前数字

    如果百位上数字大于1（2~9），则百位上出现1的情况仅由更高位决定，
    比如12213，则百位出现1的情况是：100~199,1100~1199，2100~2199，...，11100~11199,12100~12199,一共有1300个，
    并且等于更高位数字+1（12+1）乘以当前位数（100）
*/